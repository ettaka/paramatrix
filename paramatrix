#!/usr/bin/env python

import matplotlib.pyplot as plt
import numpy as np
import argparse
import os.path


def fetch_matrix_arrays(base_name):
    arrays = []
    for i in range(nof_partitions):
        filename = base_name+str(i)
        if os.path.isfile(filename):
            arrays.append(np.loadtxt(filename))
        else:
            print "Matrix file", filename, "does not exist! Adding empty matrix"
            arrays.append(np.array([[0, 0, 0]]))
    return arrays
 
def count_coordinate_extrema(arrays):
    max_coord_i = []
    max_coord_j = []
    min_coord_i = []
    min_coord_j = []
    for i in range(nof_partitions):
        max_coord_i.append(0)
        max_coord_j.append(0)
        min_coord_i.append(0)
        min_coord_j.append(0)
        transposed = arrays[i].transpose()
        max_coord_i[i] = int(np.max(transposed[0]))
        max_coord_j[i] = int(np.max(transposed[1]))
        min_coord_i[i] = int(np.min(transposed[0]))
        min_coord_j[i] = int(np.min(transposed[1]))

    print min_coord_i, min_coord_j, max_coord_i, max_coord_j

    total_max_coord_i = max(max_coord_i)
    total_max_coord_j = max(max_coord_j)
    total_min_coord_i = min(min_coord_i)
    total_min_coord_j = min(min_coord_j)
    return total_max_coord_i, total_max_coord_j, total_min_coord_i, total_min_coord_j


if __name__=="__main__":
    parser = argparse.ArgumentParser(description='Show parallel matrix data')

    parser.add_argument('-b', '--base-name', type=str, help="file base (partition number follows this, for example cm0, cm1, cm2, ...)", default='cm')
    parser.add_argument('-n', '--nof-partitions', type=int, help="How many partitions the matrix has?")
    parser.add_argument('-a', '--show-partitions', action='store_true', help="Show all partitions")

    args = parser.parse_args()
    base_name = args.base_name
    nof_partitions = args.nof_partitions
    show_partitions = args.show_partitions

    matrix_arrays = fetch_matrix_arrays(base_name)

    total_max_coord_i, total_max_coord_j, total_min_coord_i, total_min_coord_j = count_coordinate_extrema(matrix_arrays)
    print total_min_coord_i, total_min_coord_j, total_max_coord_i, total_max_coord_j

    matrix_partitions = []
    for i in range(nof_partitions):
        matrix_partitions.append(np.zeros((total_max_coord_i, total_max_coord_j)))
        for rows in matrix_arrays[i]:
            j = int(rows[0])-1
            k = int(rows[1])-1
            value = rows[2]
            if np.abs(value) > 0.0001:
                matrix_partitions[i][j][k] = i+1
        if show_partitions:
            plt.matshow(matrix_partitions[i])

    total_matrix_partitions = np.zeros((total_max_coord_i, total_max_coord_j))
    for matrix_partition in matrix_partitions:
        total_matrix_partitions += matrix_partition

    plt.matshow(total_matrix_partitions)

    plt.show()
